/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  ERC20WrapperMock,
  ERC20WrapperMockInterface,
} from "../../../openzeppelin-contracts-4.6.0/mocks/ERC20WrapperMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "_underlyingToken",
        type: "address",
      },
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "depositFor",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "recover",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "underlying",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "withdrawTo",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60a06040523480156200001157600080fd5b506040516200147f3803806200147f8339810160408190526200003491620001f1565b82828281600390805190602001906200004f9291906200007e565b508051620000659060049060208401906200007e565b5050506001600160a01b031660805250620002b7915050565b8280546200008c906200027b565b90600052602060002090601f016020900481019282620000b05760008555620000fb565b82601f10620000cb57805160ff1916838001178555620000fb565b82800160010185558215620000fb579182015b82811115620000fb578251825591602001919060010190620000de565b50620001099291506200010d565b5090565b5b808211156200010957600081556001016200010e565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200014c57600080fd5b81516001600160401b038082111562000169576200016962000124565b604051601f8301601f19908116603f0116810190828211818310171562000194576200019462000124565b81604052838152602092508683858801011115620001b157600080fd5b600091505b83821015620001d55785820183015181830184015290820190620001b6565b83821115620001e75760008385830101525b9695505050505050565b6000806000606084860312156200020757600080fd5b83516001600160a01b03811681146200021f57600080fd5b60208501519093506001600160401b03808211156200023d57600080fd5b6200024b878388016200013a565b935060408601519150808211156200026257600080fd5b5062000271868287016200013a565b9150509250925092565b600181811c908216806200029057607f821691505b602082108103620002b157634e487b7160e01b600052602260045260246000fd5b50919050565b608051611190620002ef600039600081816101cf01528181610365015281816103c1015281816103f601526106d901526111906000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c8063313ce5671161009757806395d89b411161006657806395d89b4114610232578063a457c2d71461023a578063a9059cbb1461024d578063dd62ed3e1461026057600080fd5b8063313ce5671461019d57806339509351146101b75780636f307dc3146101ca57806370a082311461020957600080fd5b806318160ddd116100d357806318160ddd1461015c578063205c28781461016457806323b872dd146101775780632f4f21e21461018a57600080fd5b806306fdde03146100fa578063095ea7b3146101185780630cd865ec1461013b575b600080fd5b610102610299565b60405161010f9190610f8c565b60405180910390f35b61012b610126366004610fd6565b61032b565b604051901515815260200161010f565b61014e610149366004611000565b610343565b60405190815260200161010f565b60025461014e565b61012b610172366004610fd6565b610354565b61012b61018536600461101b565b610394565b61012b610198366004610fd6565b6103ba565b6101a56103f2565b60405160ff909116815260200161010f565b61012b6101c5366004610fd6565b61047d565b6101f17f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161010f565b61014e610217366004611000565b6001600160a01b031660009081526020819052604090205490565b6101026104bc565b61012b610248366004610fd6565b6104cb565b61012b61025b366004610fd6565b610585565b61014e61026e366004611057565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6060600380546102a89061108a565b80601f01602080910402602001604051908101604052809291908181526020018280546102d49061108a565b80156103215780601f106102f657610100808354040283529160200191610321565b820191906000526020600020905b81548152906001019060200180831161030457829003601f168201915b5050505050905090565b600033610339818585610593565b5060019392505050565b600061034e826106b8565b92915050565b60006103603383610762565b61038b7f000000000000000000000000000000000000000000000000000000000000000084846108ad565b50600192915050565b6000336103a285828561093d565b6103ad8585856109cf565b60019150505b9392505050565b60006103e87f0000000000000000000000000000000000000000000000000000000000000000333085610bcc565b61038b8383610c04565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa92505050801561046e575060408051601f3d908101601f1916820190925261046b918101906110c4565b60015b6104785750601290565b919050565b3360008181526001602090815260408083206001600160a01b038716845290915281205490919061033990829086906104b79087906110fd565b610593565b6060600480546102a89061108a565b3360008181526001602090815260408083206001600160a01b03871684529091528120549091908381101561056d5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f00000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b61057a8286868403610593565b506001949350505050565b6000336103398185856109cf565b6001600160a01b0383166105f55760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610564565b6001600160a01b0382166106565760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610564565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6000806106c460025490565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015610728573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061074c9190611115565b610756919061112e565b905061034e8382610c04565b6001600160a01b0382166107c25760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610564565b6001600160a01b038216600090815260208190526040902054818110156108365760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610564565b6001600160a01b038316600090815260208190526040812083830390556002805484929061086590849061112e565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020016106ab565b505050565b6040516001600160a01b0383166024820152604481018290526108a890849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152610ce3565b6001600160a01b0383811660009081526001602090815260408083209386168352929052205460001981146109c957818110156109bc5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610564565b6109c98484848403610593565b50505050565b6001600160a01b038316610a4b5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f64726573730000000000000000000000000000000000000000000000000000006064820152608401610564565b6001600160a01b038216610aad5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610564565b6001600160a01b03831660009081526020819052604090205481811015610b3c5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e636500000000000000000000000000000000000000000000000000006064820152608401610564565b6001600160a01b03808516600090815260208190526040808220858503905591851681529081208054849290610b739084906110fd565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610bbf91815260200190565b60405180910390a36109c9565b6040516001600160a01b03808516602483015283166044820152606481018290526109c99085906323b872dd60e01b906084016108d9565b6001600160a01b038216610c5a5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610564565b8060026000828254610c6c91906110fd565b90915550506001600160a01b03821660009081526020819052604081208054839290610c999084906110fd565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6000610d38826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610dc89092919063ffffffff16565b8051909150156108a85780806020019051810190610d569190611145565b6108a85760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610564565b6060610dd78484600085610ddf565b949350505050565b606082471015610e575760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610564565b6001600160a01b0385163b610eae5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610564565b600080866001600160a01b03168587604051610eca9190611167565b60006040518083038185875af1925050503d8060008114610f07576040519150601f19603f3d011682016040523d82523d6000602084013e610f0c565b606091505b5091509150610f1c828286610f27565b979650505050505050565b60608315610f365750816103b3565b825115610f465782518084602001fd5b8160405162461bcd60e51b81526004016105649190610f8c565b60005b83811015610f7b578181015183820152602001610f63565b838111156109c95750506000910152565b6020815260008251806020840152610fab816040850160208701610f60565b601f01601f19169190910160400192915050565b80356001600160a01b038116811461047857600080fd5b60008060408385031215610fe957600080fd5b610ff283610fbf565b946020939093013593505050565b60006020828403121561101257600080fd5b6103b382610fbf565b60008060006060848603121561103057600080fd5b61103984610fbf565b925061104760208501610fbf565b9150604084013590509250925092565b6000806040838503121561106a57600080fd5b61107383610fbf565b915061108160208401610fbf565b90509250929050565b600181811c9082168061109e57607f821691505b6020821081036110be57634e487b7160e01b600052602260045260246000fd5b50919050565b6000602082840312156110d657600080fd5b815160ff811681146103b357600080fd5b634e487b7160e01b600052601160045260246000fd5b60008219821115611110576111106110e7565b500190565b60006020828403121561112757600080fd5b5051919050565b600082821015611140576111406110e7565b500390565b60006020828403121561115757600080fd5b815180151581146103b357600080fd5b60008251611179818460208701610f60565b919091019291505056fea164736f6c634300080d000a";

type ERC20WrapperMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC20WrapperMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC20WrapperMock__factory extends ContractFactory {
  constructor(...args: ERC20WrapperMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _underlyingToken: string,
    name: string,
    symbol: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ERC20WrapperMock> {
    return super.deploy(
      _underlyingToken,
      name,
      symbol,
      overrides || {}
    ) as Promise<ERC20WrapperMock>;
  }
  override getDeployTransaction(
    _underlyingToken: string,
    name: string,
    symbol: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _underlyingToken,
      name,
      symbol,
      overrides || {}
    );
  }
  override attach(address: string): ERC20WrapperMock {
    return super.attach(address) as ERC20WrapperMock;
  }
  override connect(signer: Signer): ERC20WrapperMock__factory {
    return super.connect(signer) as ERC20WrapperMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC20WrapperMockInterface {
    return new utils.Interface(_abi) as ERC20WrapperMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ERC20WrapperMock {
    return new Contract(address, _abi, signerOrProvider) as ERC20WrapperMock;
  }
}
