/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  Bytes32ToBytes32MapMock,
  Bytes32ToBytes32MapMockInterface,
} from "../../../../openzeppelin-contracts-4.6.0/mocks/EnumerableMapMock.sol/Bytes32ToBytes32MapMock";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bool",
        name: "result",
        type: "bool",
      },
    ],
    name: "OperationResult",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "at",
    outputs: [
      {
        internalType: "bytes32",
        name: "key",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "value",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "key",
        type: "bytes32",
      },
    ],
    name: "contains",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "key",
        type: "bytes32",
      },
    ],
    name: "get",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "key",
        type: "bytes32",
      },
      {
        internalType: "string",
        name: "errorMessage",
        type: "string",
      },
    ],
    name: "getWithMessage",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "length",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "key",
        type: "bytes32",
      },
    ],
    name: "remove",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "key",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "value",
        type: "bytes32",
      },
    ],
    name: "set",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "key",
        type: "bytes32",
      },
    ],
    name: "tryGet",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610746806100206000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c806395bc26731161005b57806395bc2673146100f1578063dc09a8a714610106578063e0886f9014610130578063f71f7a251461015857600080fd5b80631d1a696d1461008d5780631f7b6d32146100b55780636cf3dff1146100cb5780638eaa6ac0146100de575b600080fd5b6100a061009b3660046105dc565b61016b565b60405190151581526020015b60405180910390f35b6100bd61017d565b6040519081526020016100ac565b6100bd6100d93660046105f5565b61018e565b6100bd6100ec3660046105dc565b6101da565b6101046100ff3660046105dc565b6101e6565b005b6101196101143660046105dc565b610233565b6040805192151583526020830191909152016100ac565b61014361013e3660046105dc565b610249565b604080519283526020830191909152016100ac565b610104610166366004610671565b610256565b600061017781836102a5565b92915050565b600061018960006102b8565b905090565b60006101d28484848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092018290525094939250506102c39050565b949350505050565b60006101778183610318565b60006101f28183610388565b90507fed9840e0775590557ad736875d96c95cf1458b766335f74339951a32c82a9e3381604051610227911515815260200190565b60405180910390a15050565b60008061024081846103a5565b91509150915091565b60008061024081846103e2565b600061026381848461040d565b90507fed9840e0775590557ad736875d96c95cf1458b766335f74339951a32c82a9e3381604051610298911515815260200190565b60405180910390a1505050565b60006102b1838361042a565b9392505050565b600061017782610442565b6000828152600284016020526040812054801515806102e757506102e785856102a5565b839061030f5760405162461bcd60e51b81526004016103069190610693565b60405180910390fd5b50949350505050565b60008181526002830160205260408120548015158061033c575061033c84846102a5565b6102b15760405162461bcd60e51b815260206004820152601e60248201527f456e756d657261626c654d61703a206e6f6e6578697374656e74206b657900006044820152606401610306565b600081815260028301602052604081208190556102b1838361044c565b60008181526002830160205260408120548190806103d4576103c785856102a5565b9250600091506103db9050565b6001925090505b9250929050565b600080806103f08585610458565b600081815260029690960160205260409095205494959350505050565b600082815260028401602052604081208290556101d28484610464565b600081815260018301602052604081205415156102b1565b6000610177825490565b60006102b18383610470565b60006102b18383610563565b60006102b1838361058d565b600081815260018301602052604081205480156105595760006104946001836106e8565b85549091506000906104a8906001906106e8565b905081811461050d5760008660000182815481106104c8576104c861070d565b90600052602060002001549050808760000184815481106104eb576104eb61070d565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061051e5761051e610723565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610177565b6000915050610177565b600082600001828154811061057a5761057a61070d565b9060005260206000200154905092915050565b60008181526001830160205260408120546105d457508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610177565b506000610177565b6000602082840312156105ee57600080fd5b5035919050565b60008060006040848603121561060a57600080fd5b83359250602084013567ffffffffffffffff8082111561062957600080fd5b818601915086601f83011261063d57600080fd5b81358181111561064c57600080fd5b87602082850101111561065e57600080fd5b6020830194508093505050509250925092565b6000806040838503121561068457600080fd5b50508035926020909101359150565b600060208083528351808285015260005b818110156106c0578581018301518582016040015282016106a4565b818111156106d2576000604083870101525b50601f01601f1916929092016040019392505050565b60008282101561070857634e487b7160e01b600052601160045260246000fd5b500390565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fdfea164736f6c634300080d000a";

type Bytes32ToBytes32MapMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: Bytes32ToBytes32MapMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Bytes32ToBytes32MapMock__factory extends ContractFactory {
  constructor(...args: Bytes32ToBytes32MapMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Bytes32ToBytes32MapMock> {
    return super.deploy(overrides || {}) as Promise<Bytes32ToBytes32MapMock>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Bytes32ToBytes32MapMock {
    return super.attach(address) as Bytes32ToBytes32MapMock;
  }
  override connect(signer: Signer): Bytes32ToBytes32MapMock__factory {
    return super.connect(signer) as Bytes32ToBytes32MapMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): Bytes32ToBytes32MapMockInterface {
    return new utils.Interface(_abi) as Bytes32ToBytes32MapMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Bytes32ToBytes32MapMock {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as Bytes32ToBytes32MapMock;
  }
}
