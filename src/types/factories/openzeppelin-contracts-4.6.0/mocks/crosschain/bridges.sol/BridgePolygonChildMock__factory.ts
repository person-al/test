/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  BridgePolygonChildMock,
  BridgePolygonChildMockInterface,
} from "../../../../../openzeppelin-contracts-4.6.0/mocks/crosschain/bridges.sol/BridgePolygonChildMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "address",
        name: "expected",
        type: "address",
      },
    ],
    name: "InvalidCrossChainSender",
    type: "error",
  },
  {
    inputs: [],
    name: "NotCrossChainCall",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    name: "relayAs",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506101da806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063fb417a5b14610030575b600080fd5b61004361003e3660046100e6565b610045565b005b604051639a7c4b7160e01b815273ffffffffffffffffffffffffffffffffffffffff851690639a7c4b71906100859060009085908890889060040161017a565b600060405180830381600087803b15801561009f57600080fd5b505af11580156100b3573d6000803e3d6000fd5b5050505050505050565b803573ffffffffffffffffffffffffffffffffffffffff811681146100e157600080fd5b919050565b600080600080606085870312156100fc57600080fd5b610105856100bd565b9350602085013567ffffffffffffffff8082111561012257600080fd5b818701915087601f83011261013657600080fd5b81358181111561014557600080fd5b88602082850101111561015757600080fd5b60208301955080945050505061016f604086016100bd565b905092959194509250565b84815273ffffffffffffffffffffffffffffffffffffffff8416602082015260606040820152816060820152818360808301376000818301608090810191909152601f909201601f19160101939250505056fea164736f6c634300080d000a";

type BridgePolygonChildMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BridgePolygonChildMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BridgePolygonChildMock__factory extends ContractFactory {
  constructor(...args: BridgePolygonChildMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<BridgePolygonChildMock> {
    return super.deploy(overrides || {}) as Promise<BridgePolygonChildMock>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): BridgePolygonChildMock {
    return super.attach(address) as BridgePolygonChildMock;
  }
  override connect(signer: Signer): BridgePolygonChildMock__factory {
    return super.connect(signer) as BridgePolygonChildMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BridgePolygonChildMockInterface {
    return new utils.Interface(_abi) as BridgePolygonChildMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BridgePolygonChildMock {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as BridgePolygonChildMock;
  }
}
