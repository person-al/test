/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  BridgeArbitrumL1Inbox,
  BridgeArbitrumL1InboxInterface,
} from "../../../../../openzeppelin-contracts-4.6.0/mocks/crosschain/bridges.sol/BridgeArbitrumL1Inbox";

const _abi = [
  {
    inputs: [],
    name: "bridge",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60a060405233608052348015601357600080fd5b50608051608961002c60003960006031015260896000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063e78cea9214602d575b600080fd5b60537f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f3fea164736f6c634300080d000a";

type BridgeArbitrumL1InboxConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BridgeArbitrumL1InboxConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BridgeArbitrumL1Inbox__factory extends ContractFactory {
  constructor(...args: BridgeArbitrumL1InboxConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<BridgeArbitrumL1Inbox> {
    return super.deploy(overrides || {}) as Promise<BridgeArbitrumL1Inbox>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): BridgeArbitrumL1Inbox {
    return super.attach(address) as BridgeArbitrumL1Inbox;
  }
  override connect(signer: Signer): BridgeArbitrumL1Inbox__factory {
    return super.connect(signer) as BridgeArbitrumL1Inbox__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BridgeArbitrumL1InboxInterface {
    return new utils.Interface(_abi) as BridgeArbitrumL1InboxInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BridgeArbitrumL1Inbox {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as BridgeArbitrumL1Inbox;
  }
}
