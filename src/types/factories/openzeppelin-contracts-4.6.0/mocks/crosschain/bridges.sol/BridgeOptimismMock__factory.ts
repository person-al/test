/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  BridgeOptimismMock,
  BridgeOptimismMockInterface,
} from "../../../../../openzeppelin-contracts-4.6.0/mocks/crosschain/bridges.sol/BridgeOptimismMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "address",
        name: "expected",
        type: "address",
      },
    ],
    name: "InvalidCrossChainSender",
    type: "error",
  },
  {
    inputs: [],
    name: "NotCrossChainCall",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    name: "relayAs",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "xDomainMessageSender",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506102dc806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80636e296e451461003b578063fb417a5b1461005a575b600080fd5b600054604080516001600160a01b039092168252519081900360200190f35b61006d6100683660046101d6565b61006f565b005b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff198316178355604051918116929182918816906100b3908890889061026a565b6000604051808303816000865af19150503d80600081146100f0576040519150601f19603f3d011682016040523d82523d6000602084013e6100f5565b606091505b509150915061013a82826040518060400160405280601781526020017f6c6f772d6c6576656c2063616c6c207265766572746564000000000000000000815250610171565b50506000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0393909316929092179091555050505050565b606083156101805750816101b3565b8251156101905782518084602001fd5b8160405162461bcd60e51b81526004016101aa919061027a565b60405180910390fd5b9392505050565b80356001600160a01b03811681146101d157600080fd5b919050565b600080600080606085870312156101ec57600080fd5b6101f5856101ba565b9350602085013567ffffffffffffffff8082111561021257600080fd5b818701915087601f83011261022657600080fd5b81358181111561023557600080fd5b88602082850101111561024757600080fd5b60208301955080945050505061025f604086016101ba565b905092959194509250565b8183823760009101908152919050565b600060208083528351808285015260005b818110156102a75785810183015185820160400152820161028b565b818111156102b9576000604083870101525b50601f01601f191692909201604001939250505056fea164736f6c634300080d000a";

type BridgeOptimismMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BridgeOptimismMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BridgeOptimismMock__factory extends ContractFactory {
  constructor(...args: BridgeOptimismMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<BridgeOptimismMock> {
    return super.deploy(overrides || {}) as Promise<BridgeOptimismMock>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): BridgeOptimismMock {
    return super.attach(address) as BridgeOptimismMock;
  }
  override connect(signer: Signer): BridgeOptimismMock__factory {
    return super.connect(signer) as BridgeOptimismMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BridgeOptimismMockInterface {
    return new utils.Interface(_abi) as BridgeOptimismMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BridgeOptimismMock {
    return new Contract(address, _abi, signerOrProvider) as BridgeOptimismMock;
  }
}
