/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  BridgeArbitrumL1Outbox,
  BridgeArbitrumL1OutboxInterface,
} from "../../../../../openzeppelin-contracts-4.6.0/mocks/crosschain/bridges.sol/BridgeArbitrumL1Outbox";

const _abi = [
  {
    inputs: [],
    name: "bridge",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "l2ToL1Sender",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60a06040523360805234801561001457600080fd5b506080516101736100356000396000818160710152609701526101736000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806380648b021461003b578063e78cea921461006c575b600080fd5b610043610093565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b6100437f000000000000000000000000000000000000000000000000000000000000000081565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370348f3e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610100573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101249190610129565b905090565b60006020828403121561013b57600080fd5b815173ffffffffffffffffffffffffffffffffffffffff8116811461015f57600080fd5b939250505056fea164736f6c634300080d000a";

type BridgeArbitrumL1OutboxConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BridgeArbitrumL1OutboxConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BridgeArbitrumL1Outbox__factory extends ContractFactory {
  constructor(...args: BridgeArbitrumL1OutboxConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<BridgeArbitrumL1Outbox> {
    return super.deploy(overrides || {}) as Promise<BridgeArbitrumL1Outbox>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): BridgeArbitrumL1Outbox {
    return super.attach(address) as BridgeArbitrumL1Outbox;
  }
  override connect(signer: Signer): BridgeArbitrumL1Outbox__factory {
    return super.connect(signer) as BridgeArbitrumL1Outbox__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BridgeArbitrumL1OutboxInterface {
    return new utils.Interface(_abi) as BridgeArbitrumL1OutboxInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BridgeArbitrumL1Outbox {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as BridgeArbitrumL1Outbox;
  }
}
