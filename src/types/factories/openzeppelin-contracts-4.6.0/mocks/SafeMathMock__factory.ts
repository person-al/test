/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  SafeMathMock,
  SafeMathMockInterface,
} from "../../../openzeppelin-contracts-4.6.0/mocks/SafeMathMock";

const _abi = [
  {
    inputs: [],
    name: "addMemoryCheck",
    outputs: [
      {
        internalType: "uint256",
        name: "mem",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "divMemoryCheck",
    outputs: [
      {
        internalType: "uint256",
        name: "mem",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "a",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "b",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "errorMessage",
        type: "string",
      },
    ],
    name: "divWithMessage",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "a",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "b",
        type: "uint256",
      },
    ],
    name: "doAdd",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "a",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "b",
        type: "uint256",
      },
    ],
    name: "doDiv",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "a",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "b",
        type: "uint256",
      },
    ],
    name: "doMod",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "a",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "b",
        type: "uint256",
      },
    ],
    name: "doMul",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "a",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "b",
        type: "uint256",
      },
    ],
    name: "doSub",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "modMemoryCheck",
    outputs: [
      {
        internalType: "uint256",
        name: "mem",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "a",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "b",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "errorMessage",
        type: "string",
      },
    ],
    name: "modWithMessage",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "mulMemoryCheck",
    outputs: [
      {
        internalType: "uint256",
        name: "mem",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "subMemoryCheck",
    outputs: [
      {
        internalType: "uint256",
        name: "mem",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "a",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "b",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "errorMessage",
        type: "string",
      },
    ],
    name: "subWithMessage",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "a",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "b",
        type: "uint256",
      },
    ],
    name: "tryAdd",
    outputs: [
      {
        internalType: "bool",
        name: "flag",
        type: "bool",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "a",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "b",
        type: "uint256",
      },
    ],
    name: "tryDiv",
    outputs: [
      {
        internalType: "bool",
        name: "flag",
        type: "bool",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "a",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "b",
        type: "uint256",
      },
    ],
    name: "tryMod",
    outputs: [
      {
        internalType: "bool",
        name: "flag",
        type: "bool",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "a",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "b",
        type: "uint256",
      },
    ],
    name: "tryMul",
    outputs: [
      {
        internalType: "bool",
        name: "flag",
        type: "bool",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "a",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "b",
        type: "uint256",
      },
    ],
    name: "trySub",
    outputs: [
      {
        internalType: "bool",
        name: "flag",
        type: "bool",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610812806100206000396000f3fe608060405234801561001057600080fd5b50600436106101365760003560e01c80639f5cec89116100b2578063dcc721d211610081578063fb24c86011610066578063fb24c86014610261578063fb999ded14610269578063fc0ce5031461027157600080fd5b8063dcc721d21461023b578063fb1191981461024e57600080fd5b80639f5cec89146101fa578063a155bd621461020d578063a29962b114610220578063c460ae041461023357600080fd5b80636f91e802116101095780637e86d25c116100ee5780637e86d25c146101cc578063869f602f146101d4578063884557bf146101e757600080fd5b80636f91e802146101b1578063736ecb18146101b957600080fd5b80633449b5fb1461013b57806338dc0867146101615780636281efa41461018b5780636c7ac6371461019e575b600080fd5b61014e61014936600461060f565b610284565b6040519081526020015b60405180910390f35b61017461016f3660046106d3565b610299565b604080519215158352602083019190915201610158565b6101746101993660046106d3565b6102b2565b61014e6101ac3660046106d3565b6102bf565b61014e6102d2565b6101746101c73660046106d3565b610307565b61014e610314565b61014e6101e23660046106d3565b610340565b6101746101f53660046106d3565b61034c565b61014e61020836600461060f565b610359565b61014e61021b36600461060f565b610366565b61017461022e3660046106d3565b610373565b61014e610380565b61014e6102493660046106d3565b6103ac565b61014e61025c3660046106d3565b6103b8565b61014e6103c4565b61014e6103f0565b61014e61027f3660046106d3565b61041c565b6000610291848484610428565b949350505050565b6000806102a6848461046b565b915091505b9250929050565b6000806102a6848461049e565b60006102cb83836104e7565b9392505050565b604051602060005b818110156102fe576102ed6001806104f3565b506102f78161070b565b90506102da565b50506040510390565b6000806102a684846104ff565b604051602060005b818110156102fe5761032f600180610532565b506103398161070b565b905061031c565b60006102cb83836104f3565b6000806102a6848461053e565b6000610291848484610559565b6000610291848484610585565b6000806102a684846105bf565b604051602060005b818110156102fe5761039b6001806105e1565b506103a58161070b565b9050610388565b60006102cb83836105ed565b60006102cb8383610532565b604051602060005b818110156102fe576103df6001806105ed565b506103e98161070b565b90506103cc565b604051602060005b818110156102fe5761040b6001806104e7565b506104158161070b565b90506103f8565b60006102cb83836105e1565b600081836104525760405162461bcd60e51b81526004016104499190610724565b60405180910390fd5b5082848161046257610462610779565b04949350505050565b60008082600003610481575060009050806102ab565b600183858161049257610492610779565b06915091509250929050565b600080836000036104b557506001905060006102ab565b838302838582816104c8576104c8610779565b04146104db5760008092509250506102ab565b60019590945092505050565b60006102cb828461078f565b60006102cb82846107a6565b60008082600003610515575060009050806102ab565b600183858161052657610526610779565b04915091509250929050565b60006102cb82846107ba565b600080838301848110156104db5760008092509250506102ab565b6000818484111561057d5760405162461bcd60e51b81526004016104499190610724565b505050900390565b600081836105a65760405162461bcd60e51b81526004016104499190610724565b508284816105b6576105b6610779565b06949350505050565b600080838311156105d5575060009050806102ab565b50600193919092039150565b60006102cb82846107d9565b60006102cb82846107ed565b634e487b7160e01b600052604160045260246000fd5b60008060006060848603121561062457600080fd5b8335925060208401359150604084013567ffffffffffffffff8082111561064a57600080fd5b818601915086601f83011261065e57600080fd5b813581811115610670576106706105f9565b604051601f8201601f19908116603f01168101908382118183101715610698576106986105f9565b816040528281528960208487010111156106b157600080fd5b8260208601602083013760006020848301015280955050505050509250925092565b600080604083850312156106e657600080fd5b50508035926020909101359150565b634e487b7160e01b600052601160045260246000fd5b60006001820161071d5761071d6106f5565b5060010190565b600060208083528351808285015260005b8181101561075157858101830151858201604001528201610735565b81811115610763576000604083870101525b50601f01601f1916929092016040019392505050565b634e487b7160e01b600052601260045260246000fd5b6000828210156107a1576107a16106f5565b500390565b6000826107b5576107b5610779565b500690565b60008160001904831182151516156107d4576107d46106f5565b500290565b6000826107e8576107e8610779565b500490565b60008219821115610800576108006106f5565b50019056fea164736f6c634300080d000a";

type SafeMathMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SafeMathMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SafeMathMock__factory extends ContractFactory {
  constructor(...args: SafeMathMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<SafeMathMock> {
    return super.deploy(overrides || {}) as Promise<SafeMathMock>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): SafeMathMock {
    return super.attach(address) as SafeMathMock;
  }
  override connect(signer: Signer): SafeMathMock__factory {
    return super.connect(signer) as SafeMathMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SafeMathMockInterface {
    return new utils.Interface(_abi) as SafeMathMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SafeMathMock {
    return new Contract(address, _abi, signerOrProvider) as SafeMathMock;
  }
}
