/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  StringsMock,
  StringsMockInterface,
} from "../../../openzeppelin-contracts-4.6.0/mocks/StringsMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "fromUint256",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "fromUint256Hex",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "length",
        type: "uint256",
      },
    ],
    name: "fromUint256HexFixed",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061056c806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806302c5b75f1461004657806392b0ed1a1461006f578063a2bd364414610082575b600080fd5b6100596100543660046103d1565b610095565b60405161006691906103ea565b60405180910390f35b61005961007d36600461043f565b6100a6565b6100596100903660046103d1565b6100b9565b60606100a0826100c4565b92915050565b60606100b28383610123565b9392505050565b60606100a0826102d0565b6060816000036100ee5750506040805180820190915260048152630307830360e41b602082015290565b8160005b8115610111578061010281610477565b915050600882901c91506100f2565b61011b8482610123565b949350505050565b60606000610132836002610490565b61013d9060026104af565b67ffffffffffffffff811115610155576101556104c7565b6040519080825280601f01601f19166020018201604052801561017f576020820181803683370190505b509050600360fc1b8160008151811061019a5761019a6104dd565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106101c9576101c96104dd565b60200101906001600160f81b031916908160001a90535060006101ed846002610490565b6101f89060016104af565b90505b600181111561027d577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110610239576102396104dd565b1a60f81b82828151811061024f5761024f6104dd565b60200101906001600160f81b031916908160001a90535060049490941c93610276816104f3565b90506101fb565b5083156100b25760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640160405180910390fd5b6060816000036102f75750506040805180820190915260018152600360fc1b602082015290565b8160005b8115610321578061030b81610477565b915061031a9050600a83610520565b91506102fb565b60008167ffffffffffffffff81111561033c5761033c6104c7565b6040519080825280601f01601f191660200182016040528015610366576020820181803683370190505b5090505b841561011b5761037b600183610534565b9150610388600a8661054b565b6103939060306104af565b60f81b8183815181106103a8576103a86104dd565b60200101906001600160f81b031916908160001a9053506103ca600a86610520565b945061036a565b6000602082840312156103e357600080fd5b5035919050565b600060208083528351808285015260005b81811015610417578581018301518582016040015282016103fb565b81811115610429576000604083870101525b50601f01601f1916929092016040019392505050565b6000806040838503121561045257600080fd5b50508035926020909101359150565b634e487b7160e01b600052601160045260246000fd5b60006001820161048957610489610461565b5060010190565b60008160001904831182151516156104aa576104aa610461565b500290565b600082198211156104c2576104c2610461565b500190565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b60008161050257610502610461565b506000190190565b634e487b7160e01b600052601260045260246000fd5b60008261052f5761052f61050a565b500490565b60008282101561054657610546610461565b500390565b60008261055a5761055a61050a565b50069056fea164736f6c634300080d000a";

type StringsMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: StringsMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class StringsMock__factory extends ContractFactory {
  constructor(...args: StringsMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<StringsMock> {
    return super.deploy(overrides || {}) as Promise<StringsMock>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): StringsMock {
    return super.attach(address) as StringsMock;
  }
  override connect(signer: Signer): StringsMock__factory {
    return super.connect(signer) as StringsMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StringsMockInterface {
    return new utils.Interface(_abi) as StringsMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): StringsMock {
    return new Contract(address, _abi, signerOrProvider) as StringsMock;
  }
}
