/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  ERC721EnumerableMock,
  ERC721EnumerableMockInterface,
} from "../../../openzeppelin-contracts-4.6.0/mocks/ERC721EnumerableMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "approved",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "ApprovalForAll",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "baseURI",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "burn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "exists",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "getApproved",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
    ],
    name: "isApprovedForAll",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "ownerOf",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes",
      },
    ],
    name: "safeMint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "safeMint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "setApprovalForAll",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "newBaseTokenURI",
        type: "string",
      },
    ],
    name: "setBaseURI",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "tokenByIndex",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "tokenOfOwnerByIndex",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "tokenURI",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162001f6a38038062001f6a8339810160408190526200003491620001e1565b8151829082906200004d9060009060208501906200006e565b508051620000639060019060208401906200006e565b505050505062000287565b8280546200007c906200024b565b90600052602060002090601f016020900481019282620000a05760008555620000eb565b82601f10620000bb57805160ff1916838001178555620000eb565b82800160010185558215620000eb579182015b82811115620000eb578251825591602001919060010190620000ce565b50620000f9929150620000fd565b5090565b5b80821115620000f95760008155600101620000fe565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200013c57600080fd5b81516001600160401b038082111562000159576200015962000114565b604051601f8301601f19908116603f0116810190828211818310171562000184576200018462000114565b81604052838152602092508683858801011115620001a157600080fd5b600091505b83821015620001c55785820183015181830184015290820190620001a6565b83821115620001d75760008385830101525b9695505050505050565b60008060408385031215620001f557600080fd5b82516001600160401b03808211156200020d57600080fd5b6200021b868387016200012a565b935060208501519150808211156200023257600080fd5b5062000241858286016200012a565b9150509250929050565b600181811c908216806200026057607f821691505b6020821081036200028157634e487b7160e01b600052602260045260246000fd5b50919050565b611cd380620002976000396000f3fe608060405234801561001057600080fd5b506004361061018d5760003560e01c80634f6ccce7116100e357806395d89b411161008c578063b88d4fde11610066578063b88d4fde14610328578063c87b56dd1461033b578063e985e9c51461034e57600080fd5b806395d89b41146102fa578063a144819414610302578063a22cb4651461031557600080fd5b80636c0360eb116100bd5780636c0360eb146102cc57806370a08231146102d45780638832e6e3146102e757600080fd5b80634f6ccce71461029357806355f804b3146102a65780636352211e146102b957600080fd5b806323b872dd1161014557806342842e0e1161011f57806342842e0e1461025a57806342966c681461026d5780634f558e791461028057600080fd5b806323b872dd146102215780632f745c591461023457806340c10f191461024757600080fd5b8063081812fc11610176578063081812fc146101cf578063095ea7b3146101fa57806318160ddd1461020f57600080fd5b806301ffc9a71461019257806306fdde03146101ba575b600080fd5b6101a56101a03660046117bb565b61038a565b60405190151581526020015b60405180910390f35b6101c26103b5565b6040516101b19190611830565b6101e26101dd366004611843565b610447565b6040516001600160a01b0390911681526020016101b1565b61020d610208366004611878565b6104e1565b005b6008545b6040519081526020016101b1565b61020d61022f3660046118a2565b6105f6565b610213610242366004611878565b61067d565b61020d610255366004611878565b610725565b61020d6102683660046118a2565b610733565b61020d61027b366004611843565b61074e565b6101a561028e366004611843565b61075a565b6102136102a1366004611843565b610779565b61020d6102b43660046118de565b61081d565b6101e26102c7366004611843565b610829565b6101c26108b4565b6102136102e2366004611950565b6108c3565b61020d6102f5366004611a0e565b61095d565b6101c2610968565b61020d610310366004611878565b610977565b61020d610323366004611a65565b610981565b61020d610336366004611aa1565b61098c565b6101c2610349366004611843565b610a1a565b6101a561035c366004611b09565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b60006001600160e01b0319821663780e9d6360e01b14806103af57506103af82610b03565b92915050565b6060600080546103c490611b3c565b80601f01602080910402602001604051908101604052809291908181526020018280546103f090611b3c565b801561043d5780601f106104125761010080835404028352916020019161043d565b820191906000526020600020905b81548152906001019060200180831161042057829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b03166104c55760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b60006104ec82610829565b9050806001600160a01b0316836001600160a01b0316036105595760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084016104bc565b336001600160a01b03821614806105755750610575813361035c565b6105e75760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c000000000000000060648201526084016104bc565b6105f18383610b53565b505050565b6106003382610bc1565b6106725760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f76656400000000000000000000000000000060648201526084016104bc565b6105f1838383610cb8565b6000610688836108c3565b82106106fc5760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201527f74206f6620626f756e647300000000000000000000000000000000000000000060648201526084016104bc565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b61072f8282610e77565b5050565b6105f18383836040518060200160405280600081525061098c565b61075781610fc5565b50565b6000818152600260205260408120546001600160a01b031615156103af565b600061078460085490565b82106107f85760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201527f7574206f6620626f756e6473000000000000000000000000000000000000000060648201526084016104bc565b6008828154811061080b5761080b611b76565b90600052602060002001549050919050565b6105f1600a838361170c565b6000818152600260205260408120546001600160a01b0316806103af5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201527f656e7420746f6b656e000000000000000000000000000000000000000000000060648201526084016104bc565b60606108be61106c565b905090565b60006001600160a01b0382166109415760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a6560448201527f726f20616464726573730000000000000000000000000000000000000000000060648201526084016104bc565b506001600160a01b031660009081526003602052604090205490565b6105f183838361107b565b6060600180546103c490611b3c565b61072f82826110f9565b61072f338383611113565b6109963383610bc1565b610a085760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f76656400000000000000000000000000000060648201526084016104bc565b610a14848484846111e1565b50505050565b6000818152600260205260409020546060906001600160a01b0316610aa75760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201527f6e6578697374656e7420746f6b656e000000000000000000000000000000000060648201526084016104bc565b6000610ab161106c565b90506000815111610ad15760405180602001604052806000815250610afc565b80610adb8461125f565b604051602001610aec929190611b8c565b6040516020818303038152906040525b9392505050565b60006001600160e01b031982166380ac58cd60e01b1480610b3457506001600160e01b03198216635b5e139f60e01b145b806103af57506301ffc9a760e01b6001600160e01b03198316146103af565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190610b8882610829565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152600260205260408120546001600160a01b0316610c3a5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084016104bc565b6000610c4583610829565b9050806001600160a01b0316846001600160a01b03161480610c8c57506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b80610cb05750836001600160a01b0316610ca584610447565b6001600160a01b0316145b949350505050565b826001600160a01b0316610ccb82610829565b6001600160a01b031614610d475760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201527f6f776e657200000000000000000000000000000000000000000000000000000060648201526084016104bc565b6001600160a01b038216610da95760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016104bc565b610db4838383611378565b610dbf600082610b53565b6001600160a01b0383166000908152600360205260408120805460019290610de8908490611bd1565b90915550506001600160a01b0382166000908152600360205260408120805460019290610e16908490611be8565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6001600160a01b038216610ecd5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016104bc565b6000818152600260205260409020546001600160a01b031615610f325760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016104bc565b610f3e60008383611378565b6001600160a01b0382166000908152600360205260408120805460019290610f67908490611be8565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6000610fd082610829565b9050610fde81600084611378565b610fe9600083610b53565b6001600160a01b0381166000908152600360205260408120805460019290611012908490611bd1565b909155505060008281526002602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b6060600a80546103c490611b3c565b6110858383610e77565b6110926000848484611430565b6105f15760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b60648201526084016104bc565b61072f82826040518060200160405280600081525061107b565b816001600160a01b0316836001600160a01b0316036111745760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016104bc565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6111ec848484610cb8565b6111f884848484611430565b610a145760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b60648201526084016104bc565b6060816000036112865750506040805180820190915260018152600360fc1b602082015290565b8160005b81156112b0578061129a81611c00565b91506112a99050600a83611c2f565b915061128a565b60008167ffffffffffffffff8111156112cb576112cb61196b565b6040519080825280601f01601f1916602001820160405280156112f5576020820181803683370190505b5090505b8415610cb05761130a600183611bd1565b9150611317600a86611c43565b611322906030611be8565b60f81b81838151811061133757611337611b76565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350611371600a86611c2f565b94506112f9565b6001600160a01b0383166113d3576113ce81600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b6113f6565b816001600160a01b0316836001600160a01b0316146113f6576113f6838261157c565b6001600160a01b03821661140d576105f181611619565b826001600160a01b0316826001600160a01b0316146105f1576105f182826116c8565b60006001600160a01b0384163b1561157157604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290611474903390899088908890600401611c57565b6020604051808303816000875af19250505080156114af575060408051601f3d908101601f191682019092526114ac91810190611c93565b60015b611557573d8080156114dd576040519150601f19603f3d011682016040523d82523d6000602084013e6114e2565b606091505b50805160000361154f5760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b60648201526084016104bc565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610cb0565b506001949350505050565b60006001611589846108c3565b6115939190611bd1565b6000838152600760205260409020549091508082146115e6576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b60085460009061162b90600190611bd1565b6000838152600960205260408120546008805493945090928490811061165357611653611b76565b90600052602060002001549050806008838154811061167457611674611b76565b60009182526020808320909101929092558281526009909152604080822084905585825281205560088054806116ac576116ac611cb0565b6001900381819060005260206000200160009055905550505050565b60006116d3836108c3565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b82805461171890611b3c565b90600052602060002090601f01602090048101928261173a5760008555611780565b82601f106117535782800160ff19823516178555611780565b82800160010185558215611780579182015b82811115611780578235825591602001919060010190611765565b5061178c929150611790565b5090565b5b8082111561178c5760008155600101611791565b6001600160e01b03198116811461075757600080fd5b6000602082840312156117cd57600080fd5b8135610afc816117a5565b60005b838110156117f35781810151838201526020016117db565b83811115610a145750506000910152565b6000815180845261181c8160208601602086016117d8565b601f01601f19169290920160200192915050565b602081526000610afc6020830184611804565b60006020828403121561185557600080fd5b5035919050565b80356001600160a01b038116811461187357600080fd5b919050565b6000806040838503121561188b57600080fd5b6118948361185c565b946020939093013593505050565b6000806000606084860312156118b757600080fd5b6118c08461185c565b92506118ce6020850161185c565b9150604084013590509250925092565b600080602083850312156118f157600080fd5b823567ffffffffffffffff8082111561190957600080fd5b818501915085601f83011261191d57600080fd5b81358181111561192c57600080fd5b86602082850101111561193e57600080fd5b60209290920196919550909350505050565b60006020828403121561196257600080fd5b610afc8261185c565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261199257600080fd5b813567ffffffffffffffff808211156119ad576119ad61196b565b604051601f8301601f19908116603f011681019082821181831017156119d5576119d561196b565b816040528381528660208588010111156119ee57600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080600060608486031215611a2357600080fd5b611a2c8461185c565b925060208401359150604084013567ffffffffffffffff811115611a4f57600080fd5b611a5b86828701611981565b9150509250925092565b60008060408385031215611a7857600080fd5b611a818361185c565b915060208301358015158114611a9657600080fd5b809150509250929050565b60008060008060808587031215611ab757600080fd5b611ac08561185c565b9350611ace6020860161185c565b925060408501359150606085013567ffffffffffffffff811115611af157600080fd5b611afd87828801611981565b91505092959194509250565b60008060408385031215611b1c57600080fd5b611b258361185c565b9150611b336020840161185c565b90509250929050565b600181811c90821680611b5057607f821691505b602082108103611b7057634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b60008351611b9e8184602088016117d8565b835190830190611bb28183602088016117d8565b01949350505050565b634e487b7160e01b600052601160045260246000fd5b600082821015611be357611be3611bbb565b500390565b60008219821115611bfb57611bfb611bbb565b500190565b600060018201611c1257611c12611bbb565b5060010190565b634e487b7160e01b600052601260045260246000fd5b600082611c3e57611c3e611c19565b500490565b600082611c5257611c52611c19565b500690565b60006001600160a01b03808716835280861660208401525083604083015260806060830152611c896080830184611804565b9695505050505050565b600060208284031215611ca557600080fd5b8151610afc816117a5565b634e487b7160e01b600052603160045260246000fdfea164736f6c634300080d000a";

type ERC721EnumerableMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC721EnumerableMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC721EnumerableMock__factory extends ContractFactory {
  constructor(...args: ERC721EnumerableMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    name: string,
    symbol: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ERC721EnumerableMock> {
    return super.deploy(
      name,
      symbol,
      overrides || {}
    ) as Promise<ERC721EnumerableMock>;
  }
  override getDeployTransaction(
    name: string,
    symbol: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(name, symbol, overrides || {});
  }
  override attach(address: string): ERC721EnumerableMock {
    return super.attach(address) as ERC721EnumerableMock;
  }
  override connect(signer: Signer): ERC721EnumerableMock__factory {
    return super.connect(signer) as ERC721EnumerableMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC721EnumerableMockInterface {
    return new utils.Interface(_abi) as ERC721EnumerableMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ERC721EnumerableMock {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as ERC721EnumerableMock;
  }
}
