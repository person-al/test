/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  Bytes32DequeMock,
  Bytes32DequeMockInterface,
} from "../../../../openzeppelin-contracts-4.6.0/mocks/DoubleEndedQueueMock.sol/Bytes32DequeMock";

const _abi = [
  {
    inputs: [],
    name: "Empty",
    type: "error",
  },
  {
    inputs: [],
    name: "OutOfBounds",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "value",
        type: "bytes32",
      },
    ],
    name: "OperationResult",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "i",
        type: "uint256",
      },
    ],
    name: "at",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "back",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "clear",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "empty",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "front",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "length",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "popBack",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "popFront",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "value",
        type: "bytes32",
      },
    ],
    name: "pushBack",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "value",
        type: "bytes32",
      },
    ],
    name: "pushFront",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610675806100206000396000f3fe608060405234801561001057600080fd5b50600436106100be5760003560e01c80638dde084011610076578063c39f130c1161005b578063c39f130c14610176578063e0886f90146101c8578063f2a75fe4146101db57600080fd5b80638dde084014610166578063ba75bbd81461016e57600080fd5b80631f7b6d32116100a75780631f7b6d321461013e57806352efea6e1461015657806384d9fedd1461015e57600080fd5b80630df3aa97146100c3578063107dfb6414610123575b600080fd5b6101216100d13660046105f9565b60008054600019600f91820b019081900b825260016020526040822083905581546fffffffffffffffffffffffffffffffff9091166fffffffffffffffffffffffffffffffff1990911617905550565b005b61012b6101ff565b6040519081526020015b60405180910390f35b600054600f81810b600160801b909204900b0361012b565b610121610251565b61012b61025c565b61012b610269565b61012b610275565b6101216101843660046105f9565b60008054600160801b90819004600f0b8083526001602081905260408420859055835491016fffffffffffffffffffffffffffffffff908116909202911617905550565b61012b6101d63660046105f9565b610281565b600054600f81810b600160801b909204900b13156040519015158152602001610135565b60008061020c6000610293565b90507f103eed58ce9f94500a2c4079d50a53cb9a602378270d152a3004209a6a588e1d8160405161023f91815260200190565b60405180910390a1919050565b905090565b61025a60008055565b565b60008061020c600061031c565b600061024c60006103a4565b600061024c6000610407565b600061028d818361045b565b92915050565b60006102ae8254600f81810b600160801b909204900b131590565b156102cc57604051631ed9509560e11b815260040160405180910390fd5b508054600160801b90819004600f90810b600019019081900b60009081526001840160205260408120805491905583546fffffffffffffffffffffffffffffffff90811692169092021790915590565b60006103378254600f81810b600160801b909204900b131590565b1561035557604051631ed9509560e11b815260040160405180910390fd5b508054600f0b6000818152600180840160205260408220805492905583546fffffffffffffffffffffffffffffffff191692016fffffffffffffffffffffffffffffffff169190911790915590565b60006103bf8254600f81810b600160801b909204900b131590565b156103dd57604051631ed9509560e11b815260040160405180910390fd5b508054600160801b9004600f90810b60001901900b60009081526001909101602052604090205490565b60006104228254600f81810b600160801b909204900b131590565b1561044057604051631ed9509560e11b815260040160405180910390fd5b508054600f0b60009081526001909101602052604090205490565b60008061047e61046a846104cc565b85546104799190600f0b610628565b610554565b8454909150600160801b9004600f90810b9082900b126104b157604051632d0483c560e21b815260040160405180910390fd5b600f0b60009081526001939093016020525050604090205490565b60006001600160ff1b038211156105505760405162461bcd60e51b815260206004820152602860248201527f53616665436173743a2076616c756520646f65736e27742066697420696e206160448201527f6e20696e7432353600000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b5090565b60006f7fffffffffffffffffffffffffffffff19821280159061058757506f7fffffffffffffffffffffffffffffff8213155b6105505760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203160448201527f32382062697473000000000000000000000000000000000000000000000000006064820152608401610547565b60006020828403121561060b57600080fd5b5035919050565b634e487b7160e01b600052601160045260246000fd5b6000808212826001600160ff1b030384138115161561064957610649610612565b600160ff1b839003841281161561066257610662610612565b5050019056fea164736f6c634300080d000a";

type Bytes32DequeMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: Bytes32DequeMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Bytes32DequeMock__factory extends ContractFactory {
  constructor(...args: Bytes32DequeMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Bytes32DequeMock> {
    return super.deploy(overrides || {}) as Promise<Bytes32DequeMock>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Bytes32DequeMock {
    return super.attach(address) as Bytes32DequeMock;
  }
  override connect(signer: Signer): Bytes32DequeMock__factory {
    return super.connect(signer) as Bytes32DequeMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): Bytes32DequeMockInterface {
    return new utils.Interface(_abi) as Bytes32DequeMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Bytes32DequeMock {
    return new Contract(address, _abi, signerOrProvider) as Bytes32DequeMock;
  }
}
