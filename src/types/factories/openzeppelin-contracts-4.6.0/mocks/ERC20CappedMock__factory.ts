/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  ERC20CappedMock,
  ERC20CappedMockInterface,
} from "../../../openzeppelin-contracts-4.6.0/mocks/ERC20CappedMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "cap",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "cap",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60a06040523480156200001157600080fd5b5060405162000de038038062000de083398101604081905262000034916200023d565b80838381600390805190602001906200004f929190620000ca565b50805162000065906004906020840190620000ca565b50505060008111620000bd5760405162461bcd60e51b815260206004820152601560248201527f45524332304361707065643a2063617020697320300000000000000000000000604482015260640160405180910390fd5b60805250620002ec915050565b828054620000d890620002b0565b90600052602060002090601f016020900481019282620000fc576000855562000147565b82601f106200011757805160ff191683800117855562000147565b8280016001018555821562000147579182015b82811115620001475782518255916020019190600101906200012a565b506200015592915062000159565b5090565b5b808211156200015557600081556001016200015a565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200019857600080fd5b81516001600160401b0380821115620001b557620001b562000170565b604051601f8301601f19908116603f01168101908282118183101715620001e057620001e062000170565b81604052838152602092508683858801011115620001fd57600080fd5b600091505b8382101562000221578582018301518183018401529082019062000202565b83821115620002335760008385830101525b9695505050505050565b6000806000606084860312156200025357600080fd5b83516001600160401b03808211156200026b57600080fd5b620002798783880162000186565b945060208601519150808211156200029057600080fd5b506200029f8682870162000186565b925050604084015190509250925092565b600181811c90821680620002c557607f821691505b602082108103620002e657634e487b7160e01b600052602260045260246000fd5b50919050565b608051610ad16200030f6000396000818161015b01526107d30152610ad16000f3fe608060405234801561001057600080fd5b50600436106100df5760003560e01c8063395093511161008c57806395d89b411161006657806395d89b41146101d0578063a457c2d7146101d8578063a9059cbb146101eb578063dd62ed3e146101fe57600080fd5b8063395093511461017f57806340c10f191461019257806370a08231146101a757600080fd5b806323b872dd116100bd57806323b872dd14610137578063313ce5671461014a578063355274ea1461015957600080fd5b806306fdde03146100e4578063095ea7b31461010257806318160ddd14610125575b600080fd5b6100ec610237565b6040516100f99190610938565b60405180910390f35b6101156101103660046109a9565b6102c9565b60405190151581526020016100f9565b6002545b6040519081526020016100f9565b6101156101453660046109d3565b6102e1565b604051601281526020016100f9565b7f0000000000000000000000000000000000000000000000000000000000000000610129565b61011561018d3660046109a9565b610305565b6101a56101a03660046109a9565b610344565b005b6101296101b5366004610a0f565b6001600160a01b031660009081526020819052604090205490565b6100ec610352565b6101156101e63660046109a9565b610361565b6101156101f93660046109a9565b610410565b61012961020c366004610a31565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b60606003805461024690610a64565b80601f016020809104026020016040519081016040528092919081815260200182805461027290610a64565b80156102bf5780601f10610294576101008083540402835291602001916102bf565b820191906000526020600020905b8154815290600101906020018083116102a257829003601f168201915b5050505050905090565b6000336102d781858561041e565b5060019392505050565b6000336102ef858285610542565b6102fa8585856105d4565b506001949350505050565b3360008181526001602090815260408083206001600160a01b03871684529091528120549091906102d7908290869061033f908790610a9e565b61041e565b61034e82826107d1565b5050565b60606004805461024690610a64565b3360008181526001602090815260408083206001600160a01b0387168452909152812054909190838110156104035760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f00000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6102fa828686840361041e565b6000336102d78185856105d4565b6001600160a01b0383166104805760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016103fa565b6001600160a01b0382166104e15760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016103fa565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b0383811660009081526001602090815260408083209386168352929052205460001981146105ce57818110156105c15760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000060448201526064016103fa565b6105ce848484840361041e565b50505050565b6001600160a01b0383166106505760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f647265737300000000000000000000000000000000000000000000000000000060648201526084016103fa565b6001600160a01b0382166106b25760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016103fa565b6001600160a01b038316600090815260208190526040902054818110156107415760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e6365000000000000000000000000000000000000000000000000000060648201526084016103fa565b6001600160a01b03808516600090815260208190526040808220858503905591851681529081208054849290610778908490610a9e565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516107c491815260200190565b60405180910390a36105ce565b7f0000000000000000000000000000000000000000000000000000000000000000816107fc60025490565b6108069190610a9e565b11156108545760405162461bcd60e51b815260206004820152601960248201527f45524332304361707065643a206361702065786365656465640000000000000060448201526064016103fa565b61034e82826001600160a01b0382166108af5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016103fa565b80600260008282546108c19190610a9e565b90915550506001600160a01b038216600090815260208190526040812080548392906108ee908490610a9e565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b600060208083528351808285015260005b8181101561096557858101830151858201604001528201610949565b81811115610977576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b03811681146109a457600080fd5b919050565b600080604083850312156109bc57600080fd5b6109c58361098d565b946020939093013593505050565b6000806000606084860312156109e857600080fd5b6109f18461098d565b92506109ff6020850161098d565b9150604084013590509250925092565b600060208284031215610a2157600080fd5b610a2a8261098d565b9392505050565b60008060408385031215610a4457600080fd5b610a4d8361098d565b9150610a5b6020840161098d565b90509250929050565b600181811c90821680610a7857607f821691505b602082108103610a9857634e487b7160e01b600052602260045260246000fd5b50919050565b60008219821115610abf57634e487b7160e01b600052601160045260246000fd5b50019056fea164736f6c634300080d000a";

type ERC20CappedMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC20CappedMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC20CappedMock__factory extends ContractFactory {
  constructor(...args: ERC20CappedMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    name: string,
    symbol: string,
    cap: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ERC20CappedMock> {
    return super.deploy(
      name,
      symbol,
      cap,
      overrides || {}
    ) as Promise<ERC20CappedMock>;
  }
  override getDeployTransaction(
    name: string,
    symbol: string,
    cap: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(name, symbol, cap, overrides || {});
  }
  override attach(address: string): ERC20CappedMock {
    return super.attach(address) as ERC20CappedMock;
  }
  override connect(signer: Signer): ERC20CappedMock__factory {
    return super.connect(signer) as ERC20CappedMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC20CappedMockInterface {
    return new utils.Interface(_abi) as ERC20CappedMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ERC20CappedMock {
    return new Contract(address, _abi, signerOrProvider) as ERC20CappedMock;
  }
}
