/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  ReinitializerMock,
  ReinitializerMockInterface,
} from "../../../../openzeppelin-contracts-4.6.0/mocks/InitializableMock.sol/ReinitializerMock";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "i",
        type: "uint8",
      },
      {
        internalType: "uint8",
        name: "j",
        type: "uint8",
      },
    ],
    name: "chainReinitialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "counter",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "disableInitializers",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "doStuff",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "i",
        type: "uint8",
      },
      {
        internalType: "uint8",
        name: "j",
        type: "uint8",
      },
    ],
    name: "nestedReinitialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "i",
        type: "uint8",
      },
    ],
    name: "reinitialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506104d1806100206000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80636b2d8f8f1161005b5780636b2d8f8f146100ba5780638129fc1c146100cd578063874f33a1146100d5578063f8d6cdba146100dd57600080fd5b8063073de42e1461008257806331f449001461009757806361bc221a1461009f575b600080fd5b610095610090366004610448565b6100f0565b005b610095610169565b6100a860015481565b60405190815260200160405180910390f35b6100956100c836600461046a565b610173565b610095610189565b6100956101fe565b6100956100eb36600461046a565b610297565b8060006100fc82610312565b90508015610114576000805461ff0019166101001790555b61011c6101fe565b8015610164576000805461ff001916905560405160ff831681527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b61017161042d565b565b61017c826100f0565b610185816100f0565b5050565b60006101956001610312565b905080156101ad576000805461ff0019166101001790555b6101b56101fe565b80156101fb576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50565b600054610100900460ff166102805760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084015b60405180910390fd5b600180549060006102908361049d565b9190505550565b8160006102a382610312565b905080156102bb576000805461ff0019166101001790555b6102c4836100f0565b801561030c576000805461ff001916905560405160ff831681527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b60008054610100900460ff16156103a0578160ff1660011480156103355750303b155b6103985760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610277565b506000919050565b60005460ff80841691161061040e5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610277565b506000805460ff191660ff92909216919091179055600190565b919050565b6101fb60ff610312565b803560ff8116811461042857600080fd5b60006020828403121561045a57600080fd5b61046382610437565b9392505050565b6000806040838503121561047d57600080fd5b61048683610437565b915061049460208401610437565b90509250929050565b6000600182016104bd57634e487b7160e01b600052601160045260246000fd5b506001019056fea164736f6c634300080d000a";

type ReinitializerMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ReinitializerMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ReinitializerMock__factory extends ContractFactory {
  constructor(...args: ReinitializerMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ReinitializerMock> {
    return super.deploy(overrides || {}) as Promise<ReinitializerMock>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ReinitializerMock {
    return super.attach(address) as ReinitializerMock;
  }
  override connect(signer: Signer): ReinitializerMock__factory {
    return super.connect(signer) as ReinitializerMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ReinitializerMockInterface {
    return new utils.Interface(_abi) as ReinitializerMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ReinitializerMock {
    return new Contract(address, _abi, signerOrProvider) as ReinitializerMock;
  }
}
