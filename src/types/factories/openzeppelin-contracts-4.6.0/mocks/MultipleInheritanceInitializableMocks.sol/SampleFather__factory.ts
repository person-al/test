/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  SampleFather,
  SampleFatherInterface,
} from "../../../../openzeppelin-contracts-4.6.0/mocks/MultipleInheritanceInitializableMocks.sol/SampleFather";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    inputs: [],
    name: "father",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "gramps",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_gramps",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "_father",
        type: "uint256",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "value",
        type: "string",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "isHuman",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610938806100206000396000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c80638beaf7d7116100505780638beaf7d7146100c0578063f62d1888146100d3578063fa39851f146100e657600080fd5b80631c8aca3b146100775780634a6c9db6146100935780638129fc1c146100b6575b600080fd5b61008060025481565b6040519081526020015b60405180910390f35b6000546100a69062010000900460ff1681565b604051901515815260200161008a565b6100be6100fb565b005b6100be6100ce36600461081a565b610170565b6100be6100e136600461085f565b6101e9565b6100ee610260565b60405161008a919061089c565b600061010760016102ee565b9050801561011f576000805461ff0019166101001790555b610127610409565b801561016d576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50565b600061017c60016102ee565b90508015610194576000805461ff0019166101001790555b61019e838361047e565b80156101e4576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b60006101f560016102ee565b9050801561020d576000805461ff0019166101001790555b610216826104fb565b801561025c576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b6001805461026d906108f1565b80601f0160208091040260200160405190810160405280929190818152602001828054610299906108f1565b80156102e65780601f106102bb576101008083540402835291602001916102e6565b820191906000526020600020905b8154815290600101906020018083116102c957829003601f168201915b505050505081565b60008054610100900460ff1615610381578160ff1660011480156103115750303b155b6103795760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b506000919050565b60005460ff8084169116106103ef5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610370565b506000805460ff191660ff92909216919091179055600190565b600054610100900460ff166104745760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610370565b61047c610577565b565b600054610100900460ff166104e95760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610370565b6104f2826104fb565b61025c816105f5565b600054610100900460ff166105665760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610370565b61056e610409565b61016d81610665565b600054610100900460ff166105e25760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610370565b6000805462ff0000191662010000179055565b600054610100900460ff166106605760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610370565b600255565b600054610100900460ff166106d05760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610370565b805161025c9060019060208401908280546106ea906108f1565b90600052602060002090601f01602090048101928261070c5760008555610752565b82601f1061072557805160ff1916838001178555610752565b82800160010185558215610752579182015b82811115610752578251825591602001919060010190610737565b5061075e929150610762565b5090565b5b8082111561075e5760008155600101610763565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261079e57600080fd5b813567ffffffffffffffff808211156107b9576107b9610777565b604051601f8301601f19908116603f011681019082821181831017156107e1576107e1610777565b816040528381528660208588010111156107fa57600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806040838503121561082d57600080fd5b823567ffffffffffffffff81111561084457600080fd5b6108508582860161078d565b95602094909401359450505050565b60006020828403121561087157600080fd5b813567ffffffffffffffff81111561088857600080fd5b6108948482850161078d565b949350505050565b600060208083528351808285015260005b818110156108c9578581018301518582016040015282016108ad565b818111156108db576000604083870101525b50601f01601f1916929092016040019392505050565b600181811c9082168061090557607f821691505b60208210810361092557634e487b7160e01b600052602260045260246000fd5b5091905056fea164736f6c634300080d000a";

type SampleFatherConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SampleFatherConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SampleFather__factory extends ContractFactory {
  constructor(...args: SampleFatherConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<SampleFather> {
    return super.deploy(overrides || {}) as Promise<SampleFather>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): SampleFather {
    return super.attach(address) as SampleFather;
  }
  override connect(signer: Signer): SampleFather__factory {
    return super.connect(signer) as SampleFather__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SampleFatherInterface {
    return new utils.Interface(_abi) as SampleFatherInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SampleFather {
    return new Contract(address, _abi, signerOrProvider) as SampleFather;
  }
}
