/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  ReentrancyMock,
  ReentrancyMockInterface,
} from "../../../openzeppelin-contracts-4.6.0/mocks/ReentrancyMock";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "callback",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract ReentrancyAttack",
        name: "attacker",
        type: "address",
      },
    ],
    name: "countAndCall",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "n",
        type: "uint256",
      },
    ],
    name: "countLocalRecursive",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "n",
        type: "uint256",
      },
    ],
    name: "countThisRecursive",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "counter",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50600160008181559055610507806100296000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c80638c5344fa116100505780638c5344fa1461009157806396ffa690146100a4578063b672ad8b146100b757600080fd5b8063083b27321461006c57806361bc221a14610076575b600080fd5b6100746100ca565b005b61007f60015481565b60405190815260200160405180910390f35b61007461009f366004610424565b610135565b6100746100b2366004610424565b6102a1565b6100746100c536600461043d565b610314565b6002600054036101215760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b600260005561012e61040b565b6001600055565b6002600054036101875760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610118565b600260005580156102995761019a61040b565b6000306101a8600184610490565b6040516024016101ba91815260200190565b60408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16634629a27d60e11b1790525161020491906104a7565b6000604051808303816000865af19150503d8060008114610241576040519150601f19603f3d011682016040523d82523d6000602084013e610246565b606091505b50509050806102975760405162461bcd60e51b815260206004820152601b60248201527f5265656e7472616e63794d6f636b3a206661696c65642063616c6c00000000006044820152606401610118565b505b506001600055565b6002600054036102f35760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610118565b600260005580156102995761030661040b565b6102996100b2600183610490565b6002600054036103665760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610118565b600260005561037361040b565b604051630a2df1ed60e01b815263041d939960e11b60048201527f083b2732f78169bfaad6b407fa338cc97d697ed69d3915a18239cc111d51a4029073ffffffffffffffffffffffffffffffffffffffff831690630a2df1ed90602401600060405180830381600087803b1580156103ea57600080fd5b505af11580156103fe573d6000803e3d6000fd5b5050600160005550505050565b600180600082825461041d91906104e2565b9091555050565b60006020828403121561043657600080fd5b5035919050565b60006020828403121561044f57600080fd5b813573ffffffffffffffffffffffffffffffffffffffff8116811461047357600080fd5b9392505050565b634e487b7160e01b600052601160045260246000fd5b6000828210156104a2576104a261047a565b500390565b6000825160005b818110156104c857602081860181015185830152016104ae565b818111156104d7576000828501525b509190910192915050565b600082198211156104f5576104f561047a565b50019056fea164736f6c634300080d000a";

type ReentrancyMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ReentrancyMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ReentrancyMock__factory extends ContractFactory {
  constructor(...args: ReentrancyMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ReentrancyMock> {
    return super.deploy(overrides || {}) as Promise<ReentrancyMock>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ReentrancyMock {
    return super.attach(address) as ReentrancyMock;
  }
  override connect(signer: Signer): ReentrancyMock__factory {
    return super.connect(signer) as ReentrancyMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ReentrancyMockInterface {
    return new utils.Interface(_abi) as ReentrancyMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ReentrancyMock {
    return new Contract(address, _abi, signerOrProvider) as ReentrancyMock;
  }
}
