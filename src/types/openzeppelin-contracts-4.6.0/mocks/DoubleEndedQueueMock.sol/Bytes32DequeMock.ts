/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../common";

export interface Bytes32DequeMockInterface extends utils.Interface {
  functions: {
    "at(uint256)": FunctionFragment;
    "back()": FunctionFragment;
    "clear()": FunctionFragment;
    "empty()": FunctionFragment;
    "front()": FunctionFragment;
    "length()": FunctionFragment;
    "popBack()": FunctionFragment;
    "popFront()": FunctionFragment;
    "pushBack(bytes32)": FunctionFragment;
    "pushFront(bytes32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "at"
      | "back"
      | "clear"
      | "empty"
      | "front"
      | "length"
      | "popBack"
      | "popFront"
      | "pushBack"
      | "pushFront"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "at", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "back", values?: undefined): string;
  encodeFunctionData(functionFragment: "clear", values?: undefined): string;
  encodeFunctionData(functionFragment: "empty", values?: undefined): string;
  encodeFunctionData(functionFragment: "front", values?: undefined): string;
  encodeFunctionData(functionFragment: "length", values?: undefined): string;
  encodeFunctionData(functionFragment: "popBack", values?: undefined): string;
  encodeFunctionData(functionFragment: "popFront", values?: undefined): string;
  encodeFunctionData(functionFragment: "pushBack", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "pushFront",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "at", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "back", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "clear", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "empty", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "front", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "length", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "popBack", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "popFront", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pushBack", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pushFront", data: BytesLike): Result;

  events: {
    "OperationResult(bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OperationResult"): EventFragment;
}

export interface OperationResultEventObject {
  value: string;
}
export type OperationResultEvent = TypedEvent<
  [string],
  OperationResultEventObject
>;

export type OperationResultEventFilter = TypedEventFilter<OperationResultEvent>;

export interface Bytes32DequeMock extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: Bytes32DequeMockInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    at(i: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    back(overrides?: CallOverrides): Promise<[string]>;

    clear(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    empty(overrides?: CallOverrides): Promise<[boolean]>;

    front(overrides?: CallOverrides): Promise<[string]>;

    length(overrides?: CallOverrides): Promise<[BigNumber]>;

    popBack(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    popFront(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pushBack(
      value: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pushFront(
      value: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  at(i: BigNumberish, overrides?: CallOverrides): Promise<string>;

  back(overrides?: CallOverrides): Promise<string>;

  clear(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  empty(overrides?: CallOverrides): Promise<boolean>;

  front(overrides?: CallOverrides): Promise<string>;

  length(overrides?: CallOverrides): Promise<BigNumber>;

  popBack(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  popFront(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pushBack(
    value: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pushFront(
    value: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    at(i: BigNumberish, overrides?: CallOverrides): Promise<string>;

    back(overrides?: CallOverrides): Promise<string>;

    clear(overrides?: CallOverrides): Promise<void>;

    empty(overrides?: CallOverrides): Promise<boolean>;

    front(overrides?: CallOverrides): Promise<string>;

    length(overrides?: CallOverrides): Promise<BigNumber>;

    popBack(overrides?: CallOverrides): Promise<string>;

    popFront(overrides?: CallOverrides): Promise<string>;

    pushBack(value: BytesLike, overrides?: CallOverrides): Promise<void>;

    pushFront(value: BytesLike, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "OperationResult(bytes32)"(value?: null): OperationResultEventFilter;
    OperationResult(value?: null): OperationResultEventFilter;
  };

  estimateGas: {
    at(i: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    back(overrides?: CallOverrides): Promise<BigNumber>;

    clear(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    empty(overrides?: CallOverrides): Promise<BigNumber>;

    front(overrides?: CallOverrides): Promise<BigNumber>;

    length(overrides?: CallOverrides): Promise<BigNumber>;

    popBack(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    popFront(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pushBack(
      value: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pushFront(
      value: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    at(
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    back(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    clear(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    empty(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    front(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    length(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    popBack(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    popFront(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pushBack(
      value: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pushFront(
      value: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
